[{"link":"/blog/posts/2025/0105/","text":"texteditor途中まで作った\tやったもの texteditor\nきっかけ texteditorのチュートリアルをgoで書き換えるみたいな記事を読んだ 紹介されてたもの → Build Your Own Text Editor ざっと見た感じとてもよくできていたので年末年始にやることにした\tやったもの texteditor きっかけ texteditorのチュートリアルをgoで書き換えるみたいな記事を読んだ 紹介されてたもの → Build Your Own Text Editor ざっと見た感じとてもよくできていたので年末年始にやることにした 進捗 5.a text editorまで searchとsyntax highlightingはこの期間では終わらなさそうだったので今後の土日でのんびりやる 学び・感想 とてもとても楽しかった 自分のプログラミングの原体験がC++でゲーム作るとかだったので、特にキー入力の部分とかは「こういうのやったやった」みたいなとても懐かしい気持ちになった 境界値とかその辺 自作OSの本でも似たようなものを読んだ switch (key) { case ARROW_LEFT: if (E.cx != 0) { E.cx--; } else if (E.cy \u003e 0) { E.cy--; E.cx = E.row[E.cy].size; } break; case ARROW_RIGHT: if (row \u0026\u0026 E.cx \u003c row-\u003esize) { E.cx++; } else if (row \u0026\u0026 E.cx == row-\u003esize) { E.cy++; E.cx = 0; } break; case ARROW_UP: if (E.cy != 0) { E.cy--; } break; case ARROW_DOWN: if (E.cy \u003c E.numrows) { E.cy++; } break; } ゲームのリメイクを遊んでるような気分 当時のゲームの再現ではなく体験の再現 Tidy First?を実践できた 一章終わるごとに1つ整頓に充てていいというルールを自分で決めて、その中でリポジトリを少しずつ便利にしていった cpplintとか入れたり リリースノートつけてみたり これによってただのチュートリアル写経から、程よく自分のリポジトリ感を持ちながら育てることができたと思う だからgoに書き換えるとか追加のハードルは課さなかった 設計と進め方が美しすぎる 1ファイルの中でもセクション分けでここまで整理できるとは思わなかった まずハードコーディングで文字を読み込んで(=ただ表示して)、そのあとファイルを読み込むようにするみたいなステップもよかった あとはハッピーパス(普通の一文字の入力)を考えてから特殊ケース(enterとかdeleteとか)を考える部分とか Makefileを使っているが、tab文字の描画で1ステップ挟むときに ./kilo Makefileですぐ動作確認できるところとか、よくできてるなと思った わざわざtab文字のダミーファイルを作らなくていいところ 一気にそれっぽくなる瞬間一覧 自分の作ったファイルが表示できる 文字が入力できる カーソルが動く 次の行に進める 保存できる ステータスバーが表示される 行数とかファイル名が書いてあるところ 例によって図解で整理した エディタを使ってみて 当然だが、まだまだだねｗという感想になった コーディングするにはsyntax highlightingやauto indentがないとだいぶきつい VSCodeやVimがいかに良くできてるかを実感することができた feature test macroやVT100のUser guideは普通に勉強になった こうやってターミナル系のアプリって作ってくのねという参考になった","title":"texteditor途中まで作った"},{"link":"/blog/posts/2024/0713/","text":"windowsの自動起動(スタートアップ)アプリに標準のクロックを入れたい\t背景 休日にueliというランチャーアプリを入れて作業効率化を楽しんでいた 普段windowsで作業するとき、ポモドーロタイマーとして標準でついてるクロックアプリを使っていた このアプリをスタートアップアプリに登録するのに少し手こずったので備忘録\t背景 休日にueliというランチャーアプリを入れて作業効率化を楽しんでいた 普段windowsで作業するとき、ポモドーロタイマーとして標準でついてるクロックアプリを使っていた このアプリをスタートアップアプリに登録するのに少し手こずったので備忘録 調査 サポートページを確認 [ファイルの場所を開く] のオプションがない場合は、そのアプリを起動時に実行できないことを意味します。 そんなわけないので、いろいろ調べて無理やり登録した 一般的な方法 一般的なアプリ(: windows標準ではないアプリ)をスタートアップアプリに登録する方法 https://atmarkit.itmedia.co.jp/ait/articles/2308/28/news025.html 要約 エクスプローラーを開いてshell:startupを打ち込む ユーザごとのスタートアップフォルダが開く ここに自動起動したいアプリのショートカットを入れることで、自動起動できるようになる 方針 クロックアプリの場所を頑張って見つける Everythingという検索ツールを使う これはueliをいじってるときに入れてた ショートカットを作る 上記のスタートアップフォルダにショートカットを移す 設定アプリで確認したのち、再起動して動作確認 詳細 クロックアプリの場所を頑張って見つける Everythingを使ってtimerとかclockとかそれっぽい名前をいろいろ調べる ノイズが多くて大変 パスの中にWindowsAppsが入ってるものを何とか発見 名前はTime.exeだった ショートカットを作る エクスプローラーのアドレスバーみたいなところに前の手順で調べたフルパスを張り付けるとそのディレクトリに飛べる 試しに起動してみるといつものクロックアプリが起動したのでビンゴ 右クリックしてショートカットを作成 一筋縄では作れないので、「その他のオプションを確認」から作った スタートアップフォルダにショートカットを移す ドラッグ\u0026ドロップでok 設定アプリで確認したのち、再起動して動作確認 「スタートアップ アプリ」に該当のアプリがあることを確認 再起動！ ちゃんと起動することを確認！やったね～～～ 感想・学び 休日エンジニアとしていい感じの課題だった 自動起動アプリ自体はPCの起動を重くするので入れすぎに注意 こまめに棚卸すべき 今までwindowsのフォルダ整理をサボっていたが、検索ツールの発達によって一瞬で目的のものが探せるようになったのも普通にハッピー","title":"windowsの自動起動(スタートアップ)アプリに標準のクロックを入れたい"},{"link":"/blog/posts/2024/0525/","text":"ゼロからのOS自作入門を読み終わった話\tやったこと ゼロからのOS自作入門をようやく読み切った！！ https://amzn.asia/d/gRGFy2i きちんと差分のコードを読みながら手を動かしてやってたのでとてもかかった ちゃんとやり始めたのは去年の8月くらい、買ったのは2021年4月くらいにあったDMMの電子書籍セール ちゃんと積読を消化できた稀有な例\tやったこと ゼロからのOS自作入門をようやく読み切った！！ https://amzn.asia/d/gRGFy2i きちんと差分のコードを読みながら手を動かしてやってたのでとてもかかった ちゃんとやり始めたのは去年の8月くらい、買ったのは2021年4月くらいにあったDMMの電子書籍セール ちゃんと積読を消化できた稀有な例 意識したこと 無理をしない 他の趣味でもなんでもそうだけど、自分にとっての適切な距離というものがある 時間を少しでも確保していれば遅くても進んでいくというのは一つ自信になった myルール的には1ポモドーロ(自分は20分でやってる)を土日で1回こなせばokということにしていた 継続こそ最大の力 分からないときに立ち止まる 業務でも何回も体験したことだが、背景の概念から知らないときは理解に時間がかかるのが当然というのを思い出した C++やCを読むのは久々だったが特にC++の文法が懐かしかった とはいえモチベ下がっても嫌なので立ち止まりすぎず、とりあえず次に進むこともあった 「ここは細かいアドレスを計算したり変換してるだけだな」ということが分かったら、いったん細かい挙動を追うより先に進んでいいということにした 自分の言葉でメモを取る 理解できてないときは概して自分の言葉で説明できていない 前の章とか時にはめっちゃ前の章をちゃんと理解してないと意味わからないみたいな部分が特にこういう本は頻出する システムコールが分からないとそもそもアプリを動かせなかったり ファイルシステムが分からないと読み込み・書き込みの処理を作れなかったり まあ最悪再度出てきたときに振り返って思い出せればいい気はするけどね 学んだこと・懐かしかったこと C++のゲーム制作 実は中高生の時にDirectXとかSiv3Dとかでゲームを作っていたのを思い出した 左上と大きさ指定して四角形を描画するみたいなのが懐かしすぎて涙が出た ウィンドウの描画処理とかはその辺の経験まんまだったのですっと読めた C++自体も懐かしくて、この本の作者が「なんでここでラムダ関数を使うのか？」みたいなこともコラムで書いてくれるタイプだったのでそのあたりの理解も深まった 過去のOS自作入門 まず文字を表示するだけのを簡単に作って、徐々にできることを増やしていく感じが懐かしかった あの時は完走できなかったはずなので、リベンジを果たした アセンブリ パタヘネを読んでいたので、C言語の中でアセンブリ経由で呼び出さなきゃいけない関数とかも何となくのイメージがついていた 細かいなんとかレジスタみたいなのは忘れていたので調べて思い出した ここはまあ仕事とかで使うわけではないので、忘れていることを分かっている状態であれば及第点だと思っている 結局CPUはレジスタの値を読み込んで1行ずつ機械語を実行してるだけなんだよな、みたいなあたりの感覚を久々に思い出した PCIデバイスの入力 自作PCをしたときに、「PCIeはどうする？」みたいな話が上がったときに全くついていけなかった 今は規格の名前だとわかっている スロットの種類とか数が選択肢だった記憶がある 実際にそれを使う側のコードを今回の本で触ったので、ハードウェアとソフトウェアの知識・経験がつながった瞬間だった OSっぽさとは何かを考えた アプリケーションの上でアプリケーションが動いていたらOS? これはランチャーっぽい ここでいうランチャーは文化祭でゲームを動かすためのゲーム(アプリケーション)みたいなもの ターミナルが描画できればOS? OSっぽくはなってると思う 画像やテキストビューワが使えたらOS? これは実用性の観点 複数アプリが動くのもそれっぽい テセウスの船みたいな思考実験を思い出した 人生で比較的時間とお金を割いて、手を動かしたり理解してきた部分の伏線回収という感じがすごかった 知識がつながるのって楽しいね 展望など とはいえ0からOSを作れるかというと全然作れる気はしない 自分なりになぞっただけ でも趣味だしそれでいいかなーという気もする きっとこの経験も未来のどこかでつながるでしょ！くらいの軽い気持ちで次の技術書や作りたいものに手を出していきたいと思う","title":"ゼロからのOS自作入門を読み終わった話"},{"link":"/blog/posts/2024/0104/","text":"ラズパイを買って自宅サーバ入門した話\t背景 年末年始で暇だったので、ラズパイを買ってファイルサーバでも作ってみるか、と思って作り始めた。諸々で2日ほどかかった。\nhttps://amzn.to/3vvqlhK\t背景 年末年始で暇だったので、ラズパイを買ってファイルサーバでも作ってみるか、と思って作り始めた。諸々で2日ほどかかった。 https://amzn.to/3vvqlhK ちょうどたまたま家に使わなくなった以下のものがあったので、それを有効活用したいみたいな気持ちもあった。 200GBのmicroSD 元switchのSDカード ゲームが入らなくなってきたので512GBを買ったのでこれが退役した 2TBのHDD(Gdrive) https://amzn.to/3NVXlGn 元々は前の前のmacのバックアップ用途で買った SSDが256GBだったのでバックアップから復活させると簡単に容量を食い潰してしまうため、結局使わなかった あとはicloudの容量が200GBを超えそうだったので、自宅にバックアップ取れるならこれ以上プランを上げなくてもいいかな、みたいな気持ちがあった。 やったこと OSのインストール 普通のRecommendedのやつを入れたらOMV6が入らない(対応してない)と言われ、OMV6を入れたらsshができなくなる、みたいな罠を踏んで4回くらい入れ直した。結局入れたのはLiteの方。 Debian12系に当たるので巷の記事が微妙に古くて参考にならないものばかりだった。流れだけ参考にして公式ドキュメントを見るという王道に戻って解決。 OMV6のインストール(回避) 参考にしたもの: https://koh-sen.jp/blog/archives/12238 OMV6を入れるところまではなんとか行ったものの、なんか動作が不安定で先に進めなくなったので回避。 別にファイルサーバが作れればいいのでOMV6にこだわる必要はなかった。 NextCloudのインストール 参考にしたもの: https://qiita.com/hiro2do/items/f8eed40acab713f20693 色々apt経由で入れられないか試行錯誤している中で、調査してたら見つけた。snapという便利パッケージ管理ツール的なのが出ていて、それを使ったら一瞬で入った。すごい。 公式: https://snapcraft.io/docs 外付けHDD有効化 ↑のブログ参考に、mount系のコマンドは別で調べてやったら入った。素晴らしいね。 df -hで自分の意図したものが出てきた時は軽く感動。普段仕事ではクラウド上のEC2とかしか触ってないから。物理サーバは実感が湧くのがいいね。 外部公開とHTTPS(TODO) ↑のブログに言われるままにtailscaleとか色々入れてたらどうも証明書関連でうまく行ってないっぽく全世界に公開しそう(一瞬した)になったので、一旦内部公開に止めることにした。別にそれでも要件は満たせるので。 NextCloudを写真のバックアップ先に設定 参考にしたもの: https://denor.jp/iphone%E3%81%A7%E6%92%AE%E5%BD%B1%E3%81%97%E3%81%9F%E5%86%99%E7%9C%9F%E3%82%84%E5%8B%95%E7%94%BB%E3%82%92nextcloud%E3%82%B5%E3%83%BC%E3%83%90%E3%81%B8%E8%87%AA%E5%8B%95%E3%82%A2%E3%83%83%E3%83%97 やるだけ。 ここまで1日目。この後監視入れてwikiサーバでも建ててみるかという気分になり、引き続きインストールをしていた。 mackerel導入 入れるのはやるだけ。カスタムメトリックのプラグインを導入するのが苦労した。やりたかったのはラズパイのCPU温度の監視。 公式: https://mackerel.io/ja/docs/entry/advanced/custom-metrics 最終的に書いたもの [plugin.metrics.temp] command = [\"bash\", \"/home/xxx/temp.sh\"] 最初はcommand=\"/home/xxx/temp.sh\"と書いていた。これでも動いていてくれて良くない？と思ったがなぜかメトリクスが送られなかったので書き方を変えた。 ちゃんとdiscordにも通知するようにした✌️ mediawiki導入(回避) 公式: https://www.mediawiki.org/wiki/Manual:Running_MediaWiki_on_Debian_or_Ubuntu/ja これに沿って初回のセットアップページまでは進んだ。(そこにいくまでにapache2にmod-phpを入れてなくてただのphpファイルがそのまま表示されるみたいな罠を踏んだ。一回休み。) ただ、NextCloudがMySQLを立ち上げてるっぽく競合してしまったので、仕方なく諦めた。DBを共存させたりポート変えたりとかの回避手段はあるものの、そこまでしたいわけでもないので諦めた。(tryはした) dokuwiki導入 なんとdokuwikiはDBを立ち上げる必要がないので、いけそう！と思って入れた。 公式: https://www.dokuwiki.org/install:debian なんとか入ってくれたのでよかった。ただ普通に記法に慣れないw 最近のドキュメント書くツールは便利なんだなあというのを改めて感じる。 メールを送る(TODO) dokouwikiのユーザー登録にメール送信が必要なのだが、いつまで経ってもメールが来なかった。ログを見るとsendmailが入ってないよって言われたから入れてみるも挙動変わらず。 どうやらメールサーバの設定とかGmailのアプリパスワード？的な色々準備が必要そうなので、宿題。 viのモードを治す 参考にしたもの: https://yaru-yaru.net/reizo/raspberrypi%E3%81%AEvi%E3%81%A7%E6%96%B9%E5%90%91%E3%82%AD%E3%83%BC%E3%82%92%E6%8A%BC%E3%81%99%E3%81%A8abcd%E3%81%8C%E5%87%BA%E3%82%8B%E5%95%8F%E9%A1%8C/ vi互換モードというのになっていたらしい。 最初ユーザーのホームディレクトリにのみ.vimrc書いてたら、sudo viした時に現象が解決しなくて焦った。仕方なくrootの方にも書いてあげたら治った。こういう細かい課題を解決できるようになったのは進歩を感じるね。 構成図を書いた ちゃんと覚えてるうちにポートとかパスをメモっておいた。 幸運だったこと 一人暮らしを始めていた これによりルーターの全権を握れているのが大きい。また、契約時にメールサーバももらっていたのでその辺の検証もしやすい。自分の城があるって大事だよね。 仕事で触ってた 困ったら公式ドキュメントを見る。落ち着いてエラーログを確認する。みたいな一連の所作は仕事で息をするように身につけていた(そうしないと仕事にならないので)ので、万策尽きた！みたいになることが少なくてよかった。 大学の時の数年前の自分は調べる力が弱かったのでこういう時に解決できず諦めるしかなかった。 反省 調査ログを途中から取り始めた 最初はまあすぐ終わるやろ、と思いながらやっていた。trelloのコメントにフロー情報的に残していた。 そうだとしても調査ログは残すべきだった。コマンドとやったことを書いておくだけで後から見直した時に価値が出る。結局notionにストック情報としてまとめなおした。 TODO 個人開発にすぎないので気が向いたらやること一覧 外部公開とHTTPS メールを送る 温度、湿度、二酸化炭素濃度などのモニタリング","title":"ラズパイを買って自宅サーバ入門した話"},{"link":"/blog/posts/2023/1211/","text":"読書メモのフォーマット所感\t近況 M2 macを買って快適になった。普段はWindowsからやってるけど仕事でもmacだしやっぱりスイッチングコストがないのは嬉しいね。\n純粋な技術系以外のことの書いてもいいかなという気持ちになったので今日は技術書読む時に自分が使ってるメモのフォーマットとその所感を書いていく。\t近況 M2 macを買って快適になった。普段はWindowsからやってるけど仕事でもmacだしやっぱりスイッチングコストがないのは嬉しいね。 純粋な技術系以外のことの書いてもいいかなという気持ちになったので今日は技術書読む時に自分が使ってるメモのフォーマットとその所感を書いていく。 項目 以下の3項目について、表形式もしくは見出しをつけて書いていく。 日付、次どこからか 読んだ日付と、次どのページから読むかを書く。 その日読んだページは前の記録との差から直ちに求められる。 メモ、感想 書いていてメモりたくなったもの、思ったことは全部ここに書いていく 覚えておきたいもの 一回書いて整理したいもの それで派生して思ったこと 疑問 読んでいて疑問に思ったこと、調べたことを書いていく 疑問は基本解決しなくて良い、気になったら調べるくらいで なんでかというと大体少し先のページに書いてあったりするから 未来の自分への伝言のつもりで書いておく あと疑問を持って読むとそうじゃないときよりは記憶に残りやすい なくてもいい 具体例 ゼロからのOS自作入門で書いた時のやつ # 8/23 ### 次どこからか P35 WSLでQEMU使う準備から ### メモ - 最初はlinuxも1万行だった - OSの特徴 - アプリケーションのインターフェース - 計算資源分配者 - 人間に対するインターフェース - https://zero.osdev.jp/ - とりあえず開発環境のインストールに沿ってWSLに入れてみた https://github.com/uchan-nos/mikanos-build - 一通りは成功した - 付録AのXサーバ入れるやつはやってない ### 疑問 所感 最初はいろいろ頑張って書いたり分けたりしてたけど、結局この3項目に落ち着いた 結局後で見返さないことも多い。整理するようなものじゃないので書きやすさを優先する ただ、「どこかでこれメモったぞ！」というときに辿れるように最低限分けておく 読書は量ではなく時間で区切る 習慣の力のほうが大きいし楽、「慣性力」を利用する モチベが溢れてる時(他にはあとちょっとで終わる時とか)、興味がある章の時は自然に読む量が多くなる それが自分の興味、一番持って帰る価値のあるところになる","title":"読書メモのフォーマット所感"},{"link":"/blog/posts/2023/1015/","text":"表示の都合でデータを別で作ってはいけない\t背景 自分なりのTodoListの亜種みたいなアプリを作っている データの持たせ方で悩んでいた\t背景 自分なりのTodoListの亜種みたいなアプリを作っている データの持たせ方で悩んでいた 目的(課題) todoの一覧データをどう子コンポーネントに受け渡すか、および更新するか？ 結論 親コンポーネントから子コンポーネントに受け渡すデータはtodosのみ filteredTodoは表示の都合で生まれただけのもの それはvueでは算出プロパティに書くことで生成するのがセオリー 参考：https://ja.vuejs.org/guide/essentials/computed.html やっていた間違い 表示用のfilteredTodoというデータを別に作ろうとしていた これは表示の都合なだけなのでそもそも必要ない","title":"表示の都合でデータを別で作ってはいけない"},{"link":"/blog/posts/2023/0725/","text":"loupedeckとWindowsのURIスキーム\tやったこと 所感 学び やったこと loupedeckを買った 一番小さいやつ きっかけは趣味のDTMの生産性UPでいろんなとこで聞くようになっていて気になっていた ガシェット系youtuberを見漁ってこれに決めた Loupedeck Live S\tやったこと 所感 学び やったこと loupedeckを買った 一番小さいやつ きっかけは趣味のDTMの生産性UPでいろんなとこで聞くようになっていて気になっていた ガシェット系youtuberを見漁ってこれに決めた Loupedeck Live S loupedeckのソフトウェアをいろいろセットアップした ボタン一つでいろいろ呼び出せるように このブログにCSSを追加する方法を学んだ アフィリンクも登録しようとしたけど、クローキングとかをしなきゃいけないっぽいのでいったん放置 興味はある 所感 まだ三日くらいしか使ってないがとてもいい 一個設定すると一個便利になるのでハマってしまう 生産性に直結する logicool optionsとかも使ってなかったけどやってみようかなという気持ちになった 今のところの設定画面 学び windowsのURIスキームというものを学んだ きっかけ Loupedeck Live SでサラリーマンがPC作業を効率化し、更なる改善のためにプラグインを自作した話：Windows版 ドキュメント URI に応じた既定のアプリの起動 これを知るまでアプリ一覧からもなんか出てこないし、管理者権限必要なディレクトリのアプリってどうやって起動するんだ～～と永遠に調べていた 気づきはmicrosoft storeからのアプリであることに気づいたこと そのあたりのワードでググったら出てきた anankeにCSSが効かなくて困った どうやらthemes/ananke以下のassetsやらlayoutsやらをいじらなければいけなかったっぽい こういうのあるからCSS嫌い static以下に置けばimagesで参照できるよ！的なやつもこれが原因かと思ったけど違ったっぽい 日付ごとにフォルダ作ってimages作らないといけないのめんどい～～ 本当はこの辺もデフォルトのテーマ入れてるだけだから、どっかで選んでいい感じにしたい だけど対応してるものとか、いろんなものに耐えてる信頼と実績を考えるとこのままでもいい気もしている 詳しくないものはデフォルトに倣う","title":"loupedeckとWindowsのURIスキーム"},{"link":"/blog/posts/2023/0719/","text":"phpで掲示板作る\tやったこと phpで掲示板を作る〜をchatGPTと対話しながらやってみた https://github.com/velengel/keijiban デプロイとかはしてない 静的サイトではないのでGithub Pagesからやるにはバックエンド用意したり少々面倒\tやったこと phpで掲示板を作る〜をchatGPTと対話しながらやってみた https://github.com/velengel/keijiban デプロイとかはしてない 静的サイトではないのでGithub Pagesからやるにはバックエンド用意したり少々面倒 感想 こんなにさくっと2時間くらいで作れるの楽し〜〜〜 ハードル高いなと思ってたけど、それぞれの問題解決の問題解決・切り分け能力は業務で培われていたのでそこまで苦労しなかった 一回DBに繋がらなくてふて寝したが chatGPTが言ってることを丁寧に一つずつ試す(抽象的に聞く→具体的なコードで教えてのコンボが強すぎる)能力があればという条件付きではある それぞれのファイルが何やってるかは精読してないので、今度じっくり読みたい 機密情報はまあデフォルトから変えてないけどノリで環境変数を使って隠した 苦労したこと docker化 dbに無限に繋がらなくて苦労した 原因はいくつかあった 接続先DBのhost名はローカルで直で動かしてた時はlocalhostでよかったけど、コンテナから繋ぐ時はサービス名(今回の場合db)にしないといけなかった キャッシュが残っていたっぽく、docker-compose down --volumesで消してあげないといけなかった いろいろ必要だったもの php.ini apache.conf pdo_mysql .htaccess この辺を調査するためのプログラムとかから調べないといけないのが一苦労ポイントだった それぞれのファイルの意味は自分への宿題","title":"phpで掲示板作る"},{"link":"/blog/posts/2023/0717/","text":"ブログ改修工事\t先週有給3日も使ってしまい週に必要な課題解決成分が足りてなかったので、リハビリも兼ねて趣味プロをした。\nこの土日月でやったこと GitHub Pagesのカスタムドメインとしてvelengel.comを設定 このブログのデプロイ リンク集の作成 todo-testをデプロイ\t先週有給3日も使ってしまい週に必要な課題解決成分が足りてなかったので、リハビリも兼ねて趣味プロをした。 この土日月でやったこと GitHub Pagesのカスタムドメインとしてvelengel.comを設定 このブログのデプロイ リンク集の作成 todo-testをデプロイ カスタムドメインとしてvelengel.comを設定 前に実は設定していたが、freeプランだとprivate repositoryでGitHub Pages使えない(設定を解除すると課金が必要になる)ということで、仕方なく再設定した しようとして、いろいろ苦労した このドメインを他のブログサービスに使おうとしてこの辺を一旦解除したが、結局何故か使えずこっちのリンクも死ぬみたいな最悪な状況になった 研究の成果物リンクとかが切れてた https://tomokohashida.tumblr.com/post/642174236673310720 このへん ドメイン自体はお金を払ってるので勿体無いみたいな気持ちもあった 苦労したところ 既存のレコードが中途半端に残っている AレコードとCNAMEレコード ネームサーバー系も 一旦全部消して対応 ドメインの検証が必要 検索して出てきた 反映に数分かかる 地味なイライラポイント 楽だったところ chatGPTがおおよその方針を示してくれる 修正は必要だが、おおよそイメージがつくので終わりがわかっているという精神的楽さがあった 業務経験が生きた Route 53でやったことあるやつをお名前コムでやるだけといえばやるだけ それがUI的にわかりにくくて大変なんだけど…… このブログのデプロイ 自分でブログやってます！みたいなの、憧れていた エンジニアとしてアウトプットする場がなかったのもある はてブロはどっちかというと趣味とかサークルに近い内容を書くところなので でもなかなか良いフレームワークを探したり知る能力がなかったのでできてなかった これもchatGPTとか色々で解決した 苦労したところ hugoのやってみた記事が公開してるテンプレートみたいなのをクローンして楽しようとしたらなんかデプロイできず、結局公式ドキュメントを一からやることでなんとかした 原典をあたるのが結局近道 何を使ってどうデプロイするか いろいろ選択肢は出てくるが、別に今回の要件は自分でサーバー立てていろいろやりたいみたいなわけではない(勉強でもないのにお金をかけたくないし)ので、そこの選定に一番コスト使った気がする 他の選択肢：gatsbyとか 楽だったところ hugoでビルドできんの控えめに言ってすごすぎる、いつの間にこんな時代になってたんだ chatGPTバンザイ リンク集の作成 https://www.velengel.com/ 今までの成果物のリンクをまとめる場所が欲しかった ほんとは経歴とかも書いて自己紹介要素を足したい lit.linkの劣化版みたいな感じになってる 苦労したところ GitHub Pagesの仕様に合わせてdocs以下に書き出すようにする必要があった 毎回HelloWorld.vueを消してなんとかしなきゃいけないの地味にめんどい、テンプレートから作る弊害 楽だったところ chatGPTに「カードっぽく表示したい」みたいなことを言えば概ねそうしてくれる。微修正は必要だが 作りたいものに最短でいけるようになった todo-testをデプロイ https://www.velengel.com/todo-test/ Vue3のキャッチアップを兼ねて(Composition APIとかTypeScriptとか)趣味で作ってたもの 一応動くところまではいってるので、デプロイしておこうかなみたいな感じ","title":"ブログ改修工事"},{"link":"/blog/posts/my-first-post/","text":"はじまり\tいろいろ苦労して何とかできたポスト\n./hugo new posts/my-first-post.md\tいろいろ苦労して何とかできたポスト ./hugo new posts/my-first-post.md","title":"はじまり"}]